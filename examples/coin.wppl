var correlation = function(xs, ys) {
    var mx = sum(xs)/xs.length,
        my = sum(ys)/ys.length;

    var num = sum(map2(function(x,y) { (x-mx) * (y-my)}, xs, ys));
    var den = Math.sqrt(sum(map(function(x) { (x-mx) * (x-mx)},xs))) *
        Math.sqrt(sum(map(function(y) { (y-my) * (y-my)},ys)));

    num/den
}

var csvString = function(rows, header) {
    var string1 = header ? _.keys(rows[0]).join(',') + '\n' : '';
    var string2 = pam(rows, function(row) { return _.values(row).join(',')}).join('\n');
    return string1 + string2;
}

var coinWeights = [0.01, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.99];

var round = function(x, n) {
    var m = Math.pow(10,n)
    return Math.round(x*m)/m;
}

var formatExperiment = function(x) {
    map(function(xi) { return xi ? 'H' : 'T' }, x).join('')
}

// assumes a.length == b.length
var arraysEqual = function(as,bs) {
    return all(idF, map2(function(a, b) { return a === b }, as, bs))
}

var markovCoin = function(sequence) {
    Enumerate(function(){
        var transitionProb = uniformDraw(coinWeights);
        var generateSequence = function(n, flipsSoFar) {
            if (flipsSoFar.length == n) {
                return flipsSoFar;
            } else {
                var lastFlip = last(flipsSoFar);
                return generateSequence(n,
                                        append(flipsSoFar,
                                               flip(transitionProb) ? !lastFlip : lastFlip))
            }
        }

        var firstCoin = flip();
        var sampled = generateSequence(sequence.length, [firstCoin]);
        condition(arraysEqual(sampled, sequence));

        return flip(transitionProb) ? !last(sampled) : last(sampled);
    })
}


// TODO: in webppl, make sure cache() preserves names
var fairSingle = Model('fairSingle', cache(function(sequence) {
    Enumerate(function() {
        return flip()
    })
}));

var biasSingle = Model('biasSingle', cache(function(sequence) {
    Enumerate(function() {
        var p = uniformDraw(coinWeights);
        var sampled = repeat(sequence.length, function() { flip(p) })
        condition(arraysEqual(sampled, sequence))
        return flip(p);
    })
}));

var groupify = function(m) {
    // maybe discriminative m should be of type ((x -> y) -> R) ?
    // this obviates the need to cache the single distribution by hand..
    var gm = function(x, y) {
        var yDist = m(x.sequence);
        var p = Math.exp(yDist.score(true));
        return Binomial({n: x.n, p: p}).score(y)
    }
    return Model(m.name.replace('Single', 'Group'), gm);
}

var fairGroup = groupify(fairSingle);
var biasGroup = groupify(biasSingle);

//sample(biasGroup({n: 20, sequence: [true,true,true,true] }))

AIG({
    M: function() { uniformDraw([fairGroup, biasGroup]) },
    x: {n: 20, sequence: [true,false,false,true]},
    y: 3
})

// EIG({
//     M: function() { uniformDraw([fairGroup, biasGroup]) },
//     X: function() { return {n: 20, sequence: repeat(4, flip) } },
//     Y: function() { randomInteger(20 + 1) }
// })
